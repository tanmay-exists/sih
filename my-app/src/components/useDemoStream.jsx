import { useState, useEffect, useMemo, useRef } from "react";

const EEG_CHANNELS = ["Fp1", "Fp2", "Cz"]; // Reduced to match visualization in EegStreamChart

// --- NEW: Hardcoded attention sequence for predictable demo values ---
// This array has 20 values: 18 are high-focus (60-90) and 2 are low-focus (0-30).
const ATTENTION_SEQUENCE = [75, 82, 68, 88, 79, 15, 85, 90, 71, 83, 66, 77, 89, 28, 74, 81, 70, 86, 76, 84];

export default function useDemoStream(isStreaming = false) {
Â  const [attention, setAttention] = useState(0);
Â  const [eegData, setEegData] = useState([]);
Â  const [sessionEvents, setSessionEvents] = useState([]);
Â  const [attentionHistory, setAttentionHistory] = useState([]);
Â  const [focusStreak, setFocusStreak] = useState(0);
Â  const [ws, setWs] = useState(null);
Â  const lastEventTimestampRef = useRef(0);
Â  const lastAttentionUpdateRef = useRef(Date.now());
  const attentionIndexRef = useRef(0);

Â  useEffect(() => {
Â  Â  if (!isStreaming) {
Â  Â  Â  console.log("Session ended. Final sessionEvents:", sessionEvents);
Â  Â  Â  console.log("Session ended. Final attentionHistory length:", attentionHistory.length, "data:", attentionHistory);
Â  Â  Â  setFocusStreak(0);
Â  Â  Â  if (ws) {
Â  Â  Â  Â  ws.close();
Â  Â  Â  Â  setWs(null);
Â  Â  Â  }
Â  Â  Â  return;
Â  Â  }

    // Reset attention cycle index
    attentionIndexRef.current = 0;

Â  Â  // Reset session events and attention history when a new session starts
Â  Â  const initialAttention = 0;
Â  Â  const startTimestamp = Date.now();
Â  Â  setSessionEvents([{ timestamp: startTimestamp, event: "Session Started", attention: Math.round(initialAttention) }]);
Â  Â  setAttentionHistory([{ timestamp: startTimestamp, attention: Math.round(initialAttention) }]);
Â  Â  console.log("Initial session event logged:", { timestamp: startTimestamp, event: "Session Started", attention: Math.round(initialAttention) });
Â  Â  lastEventTimestampRef.current = startTimestamp;
Â  Â  lastAttentionUpdateRef.current = startTimestamp;

Â  Â  // Initialize WebSocket connection
Â  Â  const websocket = new WebSocket("ws://localhost:8765");
Â  Â  setWs(websocket);

Â  Â  websocket.onopen = () => {
Â  Â  Â  console.log("ðŸŸ¢ Connected to WebSocket server");
Â  Â  };

Â  Â  websocket.onmessage = (event) => {
Â  Â  Â  try {
Â  Â  Â  Â  const data = JSON.parse(event.data);
Â  Â  Â  Â  const { eeg_buffer, current_focus_text } = data;

Â  Â  Â  Â  // Validate eeg_buffer
Â  Â  Â  Â  if (!eeg_buffer || !Array.isArray(eeg_buffer)) {
Â  Â  Â  Â  Â  console.error("Invalid or missing eeg_buffer data:", eeg_buffer);
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // Process EEG signal into multi-channel format
Â  Â  Â  Â  const timestamp = Date.now();
        
        const mean = eeg_buffer.reduce((sum, val) => sum + val, 0) / eeg_buffer.length;
        const scaledMean = (mean / 500);

        const newEegPoint = EEG_CHANNELS.reduce((acc, channel, index) => {
            const noise = (Math.random() - 0.5) * 0.2; 
            const variation = 1 + (index * 0.1 - 0.1);
            acc[channel] = {
                beta: Math.max(-2, Math.min(2, scaledMean * variation + noise)),
            };
            return acc;
        }, { timestamp });

Â  Â  Â  Â  setEegData((prev) => {
Â  Â  Â  Â  Â  const newData = [...prev.slice(-49), newEegPoint];
Â  Â  Â  Â  Â  return newData;
Â  Â  Â  Â  });
        
        // --- FIX: Use the hardcoded attention sequence ---
        const currentAttention = ATTENTION_SEQUENCE[attentionIndexRef.current];
        attentionIndexRef.current = (attentionIndexRef.current + 1) % ATTENTION_SEQUENCE.length;
Â  Â  Â  Â  setAttention(currentAttention);

Â  Â  Â  Â  // Add to attention history every message for continuous graph
Â  Â  Â  Â  setAttentionHistory((prev) => {
Â  Â  Â  Â  Â  const newHistory = [...prev, { timestamp, attention: Math.round(currentAttention) }];
Â  Â  Â  Â  Â  return newHistory.length > 600 ? newHistory.slice(-600) : newHistory; // Limit to last 600 points (~240s)
Â  Â  Â  Â  });
Â  Â  Â  Â  lastAttentionUpdateRef.current = timestamp;

Â  Â  Â  Â  // Update focus streak
Â  Â  Â  Â  setFocusStreak((prevStreak) => {
        // Use the new attention value to determine focus for streak purposes
Â  Â  Â  Â  Â  if (currentAttention >= 60) {
Â  Â  Â  Â  Â  Â  return prevStreak + 0.4; // Increment by 0.4s per chunk
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  if (prevStreak > 5) {
Â  Â  Â  Â  Â  Â  Â  setSessionEvents((prevEvents) => {
Â  Â  Â  Â  Â  Â  Â  Â  const newEvents = [
Â  Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  timestamp: Date.now(),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  event: `Focus Streak Lost (${prevStreak.toFixed(0)}s)`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  attention: Math.round(currentAttention),
Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  Â  ...prevEvents,
Â  Â  Â  Â  Â  Â  Â  Â  ];
Â  Â  Â  Â  Â  Â  Â  Â  console.log("Focus streak lost event:", newEvents[0]);
Â  Â  Â  Â  Â  Â  Â  Â  return newEvents;
Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return 0;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });

Â  Â  Â  Â  // Log significant events every 10 seconds
Â  Â  Â  Â  const now = Date.now();
Â  Â  Â  Â  if (now - lastEventTimestampRef.current >= 10000) { // 10 seconds
          // Also base event type on the new attention value
Â  Â  Â  Â  Â  const eventType = currentAttention >= 75 ? "Peak Focus" : "Major Distraction";
Â  Â  Â  Â  Â  setSessionEvents((prev) => {
Â  Â  Â  Â  Â  Â  const newEvents = [
Â  Â  Â  Â  Â  Â  Â  { timestamp, event: eventType, attention: Math.round(currentAttention) },
Â  Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  ];
Â  Â  Â  Â  Â  Â  console.log("Significant event logged:", newEvents[0]);
Â  Â  Â  Â  Â  Â  return newEvents;
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  lastEventTimestampRef.current = now;
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error processing WebSocket data:", error);
Â  Â  Â  }
Â  Â  };

Â  Â  websocket.onclose = () => {
Â  Â  Â  console.log("ðŸ”´ WebSocket connection closed");
Â  Â  Â  setWs(null);
Â  Â  };

Â  Â  websocket.onerror = (error) => {
Â  Â  Â  console.error("WebSocket error:", error);
Â  Â  };

Â  Â  // Fallback to simulate EEG data if WebSocket is slow
Â  Â  const interval = setInterval(() => {
Â  Â  Â  const now = Date.now();
Â  Â  Â  if (now - lastAttentionUpdateRef.current >= 1000) { // 1s without update
Â  Â  Â  Â  setAttention((prev) => {
          // Also use the sequence in the fallback
          const newAttention = ATTENTION_SEQUENCE[attentionIndexRef.current];
          attentionIndexRef.current = (attentionIndexRef.current + 1) % ATTENTION_SEQUENCE.length;
Â  Â  Â  Â  Â  setAttentionHistory((prevHistory) => {
Â  Â  Â  Â  Â  Â  const newHistory = [...prevHistory, { timestamp: now, attention: Math.round(newAttention) }];
Â  Â  Â  Â  Â  Â  return newHistory.length > 600 ? newHistory.slice(-600) : newHistory;
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  return newAttention;
Â  Â  Â  Â  });
Â  Â  Â  Â  // Add fallback EEG data
Â  Â  Â  Â  setEegData((prev) => {
Â  Â  Â  Â  Â  const timestamp = now;
          const fallbackValue = (Math.random() - 0.5) * 4;
Â  Â  Â  Â  Â  const newEegPoint = EEG_CHANNELS.reduce((acc, channel, index) => {
            const channelOffset = (index - 1) * 0.3; 
Â  Â  Â  Â  Â  Â  acc[channel] = { beta: Math.max(-2, Math.min(2, fallbackValue + channelOffset)) };
Â  Â  Â  Â  Â  Â  return acc;
Â  Â  Â  Â  Â  }, { timestamp });
Â  Â  Â  Â  Â  const newData = [...prev.slice(-49), newEegPoint];
Â  Â  Â  Â  Â  console.log("Fallback EEG data:", newData[newData.length - 1]);
Â  Â  Â  Â  Â  return newData;
Â  Â  Â  Â  });
Â  Â  Â  Â  lastAttentionUpdateRef.current = now;
Â  Â  Â  }
Â  Â  }, 500);

Â  Â  return () => {
Â  Â  Â  websocket.close();
Â  Â  Â  clearInterval(interval);
Â  Â  };
Â  }, [isStreaming]);

Â  const formattedEegData = useMemo(
Â  Â  () =>
Â  Â  Â  eegData.map((d) => ({
Â  Â  Â  Â  time: new Date(d.timestamp).toLocaleTimeString(),
Â  Â  Â  Â  Fp1: d.Fp1.beta,
Â  Â  Â  Â  Fp2: d.Fp2.beta,
Â  Â  Â  Â  Cz: d.Cz.beta,
Â  Â  Â  })),
Â  Â  [eegData]
Â  );

Â  return { attention, eegData: formattedEegData, sessionEvents, attentionHistory, focusStreak, rawEeg: eegData };
}
